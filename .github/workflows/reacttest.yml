# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: test react 


on:
  push

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        # See   the supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: CI=false npm run build 
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: Output
        path : ./build
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.9
      with:
       name: Output
       path: ./d
       # In the first workflow

# the job to create repository dispatch event
  job_create_repository_dispatch:
    needs: [build]
    runs-on: windows-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
    steps:
      - name: Create a repository dispatch event to trigger workflow
        shell: pwsh
        run: |
          $pat = $env:GITHUB_PAT
          $uri = "https://api.github.com/repos/BrightRan/TestClock/dispatches"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f "", $pat)))

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Authorization", ("Basic {0}" -f $base64AuthInfo))
          $headers.Add("Accept", "application/vnd.github.everest-preview+json")
          $headers.Add("Content-Type", "application/json")

          $body = "{
            `"event_type`": `"test-repository-dispatch`",
            `"client_payload`": {
              `"unit`": false,
              `"integration`": true
            }
          }"

          $response = Invoke-RestMethod -Uri $uri -Headers $headers -Body $body -Method POST
          $response | ConvertTo-Json
    
       
   
